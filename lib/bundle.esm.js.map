{"version":3,"file":"bundle.esm.js","sources":["../src/deepl_adapter.ts","../src/translate_adapter_builder.ts"],"sourcesContent":["import * as deepl from \"deepl-node\";\nimport { TranslateAdapter } from \"@/translate_adapter\";\n\nexport class DeeplAdapter implements TranslateAdapter {\n  private translator;\n\n  constructor(\n    private translateConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").DEEPL_API_KEY || process.env.DEEPL_API_KEY || \"\",\n    },\n  ) {\n    this.initCheck(translateConfig);\n    this.translator = new deepl.Translator(translateConfig.apiKey);\n  }\n\n  private initCheck(translateConfig: Record<string, string>) {\n    for (const key of Object.keys(this.translateConfig)) {\n      if (!translateConfig[key]) {\n        throw new Error(`translateConfig.${key} is required but not set.`);\n      }\n    }\n  }\n\n  async translateText(sourceText: string, targetLang: string, sourceLang?: string, delimiter?: string): Promise<string> {\n    const transRes = await this.translator.translateText(\n      sourceText,\n      sourceLang ? (sourceLang as deepl.SourceLanguageCode) : null,\n      targetLang as deepl.TargetLanguageCode,\n    );\n\n    let resultText: string = \"\";\n    if (Array.isArray(transRes)) {\n      const resTextDelimiter = delimiter || \" \";\n      resultText = transRes.map((el) => el.text).join(resTextDelimiter);\n    } else {\n      resultText = transRes.text;\n    }\n    return resultText;\n  }\n}\n","import { TranslateAdapter } from \"@/translate_adapter\";\nimport { DeeplAdapter } from \"@/deepl_adapter\";\n\ntype TranslateAdapterConstructor = new (...args: any[]) => TranslateAdapter;\nconst translateAdapterClasses: Record<string, TranslateAdapterConstructor> = {\n  DeepL: DeeplAdapter,\n};\n\nconst translateAdapterBuilder = (translateId: string): TranslateAdapter => {\n  const translateAdapterClass = translateAdapterClasses[translateId];\n  return new translateAdapterClass();\n};\n\nexport default translateAdapterBuilder;\n"],"names":[],"mappings":";;MAGa,YAAY,CAAA;AAGvB,IAAA,WAAA,CACU,eAAkB,GAAA;QACxB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,EAAE;AACrG,KAAA,EAAA;QAFO,IAAe,CAAA,eAAA,GAAf,eAAe;AAIvB,QAAA,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC;AAC/B,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC;;AAGxD,IAAA,SAAS,CAAC,eAAuC,EAAA;AACvD,QAAA,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;AACnD,YAAA,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;AACzB,gBAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,CAAA,yBAAA,CAA2B,CAAC;;;;IAKxE,MAAM,aAAa,CAAC,UAAkB,EAAE,UAAkB,EAAE,UAAmB,EAAE,SAAkB,EAAA;QACjG,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAClD,UAAU,EACV,UAAU,GAAI,UAAuC,GAAG,IAAI,EAC5D,UAAsC,CACvC;QAED,IAAI,UAAU,GAAW,EAAE;AAC3B,QAAA,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC3B,YAAA,MAAM,gBAAgB,GAAG,SAAS,IAAI,GAAG;AACzC,YAAA,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;;aAC5D;AACL,YAAA,UAAU,GAAG,QAAQ,CAAC,IAAI;;AAE5B,QAAA,OAAO,UAAU;;AAEpB;;ACnCD,MAAM,uBAAuB,GAAgD;AAC3E,IAAA,KAAK,EAAE,YAAY;CACpB;AAED,MAAM,uBAAuB,GAAG,CAAC,WAAmB,KAAsB;AACxE,IAAA,MAAM,qBAAqB,GAAG,uBAAuB,CAAC,WAAW,CAAC;IAClE,OAAO,IAAI,qBAAqB,EAAE;AACpC;;;;"}