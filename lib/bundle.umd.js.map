{"version":3,"file":"bundle.umd.js","sources":["../src/translate_adapter_builder.ts","../src/deepl_adapter.ts"],"sourcesContent":["import { TranslateAdapter } from \"@/translate_adapter\";\nimport { DeeplAdapter } from \"@/deepl_adapter\";\n\ntype TranslateAdapterConstructor = new (...args: any[]) => TranslateAdapter;\nconst translateAdapterClasses: Record<string, TranslateAdapterConstructor> = {\n  DeepL: DeeplAdapter,\n};\n\nconst translateAdapterBuilder = (translateId: string): TranslateAdapter => {\n  const translateAdapterClass = translateAdapterClasses[translateId];\n  return new translateAdapterClass();\n};\n\nexport default translateAdapterBuilder;\n","import * as deepl from \"deepl-node\";\nimport { TranslateAdapter } from \"@/translate_adapter\";\n\nexport class DeeplAdapter implements TranslateAdapter {\n  private translator;\n\n  constructor(\n    private translateConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").DEEPL_API_KEY || process.env.DEEPL_API_KEY || \"\",\n    },\n  ) {\n    this.initCheck(translateConfig);\n    this.translator = new deepl.Translator(translateConfig.apiKey);\n  }\n\n  private initCheck(translateConfig: Record<string, string>) {\n    for (const key of Object.keys(this.translateConfig)) {\n      if (!translateConfig[key]) {\n        throw new Error(`translateConfig.${key} is required but not set.`);\n      }\n    }\n  }\n\n  async translateText(sourceText: string, targetLang: string, sourceLang?: string, delimiter?: string): Promise<string> {\n    const transRes = await this.translator.translateText(\n      sourceText,\n      sourceLang ? (sourceLang as deepl.SourceLanguageCode) : null,\n      targetLang as deepl.TargetLanguageCode,\n    );\n\n    let resultText: string = \"\";\n    if (Array.isArray(transRes)) {\n      const resTextDelimiter = delimiter || \" \";\n      resultText = transRes.map((el) => el.text).join(resTextDelimiter);\n    } else {\n      resultText = transRes.text;\n    }\n    return resultText;\n  }\n}\n"],"names":["translateAdapterClasses","DeepL","constructor","translateConfig","apiKey","JSON","parse","process","env","APP_SECRETS","DEEPL_API_KEY","this","initCheck","translator","deepl","Translator","key","Object","keys","Error","translateText","sourceText","targetLang","sourceLang","delimiter","transRes","resultText","Array","isArray","resTextDelimiter","map","el","text","join","translateId","translateAdapterClass"],"mappings":"ijBAIA,MAAMA,EAAuE,CAC3EC,YCCA,WAAAC,CACUC,EAAkB,CACxBC,OAAQC,KAAKC,MAAMC,QAAQC,IAAIC,aAAe,MAAMC,eAAiBH,QAAQC,IAAIE,eAAiB,KAD5FC,KAAeR,gBAAfA,EAIRQ,KAAKC,UAAUT,GACfQ,KAAKE,WAAa,IAAIC,EAAMC,WAAWZ,EAAgBC,QAGjD,SAAAQ,CAAUT,GAChB,IAAK,MAAMa,KAAOC,OAAOC,KAAKP,KAAKR,iBACjC,IAAKA,EAAgBa,GACnB,MAAM,IAAIG,MAAM,mBAAmBH,8BAKzC,mBAAMI,CAAcC,EAAoBC,EAAoBC,EAAqBC,GAC/E,MAAMC,QAAiBd,KAAKE,WAAWO,cACrCC,EACAE,GAAwD,KACxDD,GAGF,IAAII,EAAqB,GACzB,GAAIC,MAAMC,QAAQH,GAAW,CAC3B,MAAMI,EAAmBL,GAAa,IACtCE,EAAaD,EAASK,KAAKC,GAAOA,EAAGC,OAAMC,KAAKJ,QAEhDH,EAAaD,EAASO,KAExB,OAAON,+BD7BsBQ,GAExB,IAAIC,EADmBnC,EAAwBkC"}