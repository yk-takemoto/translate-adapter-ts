!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("deepl-node")):"function"==typeof define&&define.amd?define(["exports","deepl-node"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["llm-handler"]={},e.deepl)}(this,(function(e,t){"use strict";function n(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var r=n(t);const o={DeepL:class{constructor(e={apiKey:JSON.parse(process.env.APP_SECRETS||"{}").DEEPL_API_KEY||process.env.DEEPL_API_KEY||""}){this.translateConfig=e,this.initCheck(e),this.translator=new r.Translator(e.apiKey)}initCheck(e){for(const t of Object.keys(this.translateConfig))if(!e[t])throw new Error(`translateConfig.${t} is required but not set.`)}async translateText(e,t,n,r){const o=await this.translator.translateText(e,n||null,t);let s="";if(Array.isArray(o)){const e=r||" ";s=o.map((e=>e.text)).join(e)}else s=o.text;return s}}};e.translateAdapterBuilder=e=>new(0,o[e])}));
//# sourceMappingURL=bundle.umd.js.map
